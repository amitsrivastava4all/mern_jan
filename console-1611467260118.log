function show(){
console.log(i);
let i = 30;
console.log(i);
for(let i = 1; i<=10; i++){
console.log(i);
}
let i = 20;
console.log(i);
}
VM23:8 Uncaught SyntaxError: Identifier 'i' has already been declared
function show(){
console.log(i);
let i = 30;
console.log(i);
for(let i = 1; i<=10; i++){
console.log(i);
}
//let i = 20;
console.log(i);
}
undefined
show();
VM32:2 Uncaught ReferenceError: Cannot access 'i' before initialization
    at show (<anonymous>:2:13)
    at <anonymous>:1:1
show @ VM32:2
(anonymous) @ VM52:1
function show(){
//console.log(i);
let i = 30;
console.log(i);
for(let i = 1; i<=10; i++){
console.log(i);
}
//let i = 20;
console.log(i);
}
undefined
show();
VM60:4 30
VM60:6 1
VM60:6 2
VM60:6 3
VM60:6 4
VM60:6 5
VM60:6 6
VM60:6 7
VM60:6 8
VM60:6 9
VM60:6 10
VM60:9 30
undefined
const e = 1000;
undefined
e = 2000;
VM132:1 Uncaught TypeError: Assignment to constant variable.
    at <anonymous>:1:3
(anonymous) @ VM132:1
const ff = [100,2000,3000];
undefined
ff = [];
VM215:1 Uncaught TypeError: Assignment to constant variable.
    at <anonymous>:1:4
(anonymous) @ VM215:1
ff[0] = 432432;
432432
ff;
(3) [432432, 2000, 3000]
try{
    throw new Error('My Error');
}
catch(ex){
console.log(ex);
}
ex;
VM392:5 Error: My Error
    at <anonymous>:2:11
VM392:7 Uncaught ReferenceError: ex is not defined
    at <anonymous>:7:1
(anonymous) @ VM392:7
function disp(){
(function(){
for(var i = 1; i<=10; i++){
    console.log(i);
}})();
console.lo(i);

}
undefined
disp();
VM578:4 1
VM578:4 2
VM578:4 3
VM578:4 4
VM578:4 5
VM578:4 6
VM578:4 7
VM578:4 8
VM578:4 9
VM578:4 10
VM578:6 Uncaught ReferenceError: i is not defined
    at disp (<anonymous>:6:12)
    at <anonymous>:1:1
disp @ VM578:6
(anonymous) @ VM598:1
function disp(){
(function(){
for(var i = 1; i<=10; i++){
    console.log(i);
}})();
console.log(i);

}
undefined
disp();
VM612:4 1
VM612:4 2
VM612:4 3
VM612:4 4
VM612:4 5
VM612:4 6
VM612:4 7
VM612:4 8
VM612:4 9
VM612:4 10
VM612:6 Uncaught ReferenceError: i is not defined
    at disp (<anonymous>:6:13)
    at <anonymous>:1:1
disp @ VM612:6
(anonymous) @ VM618:1
var result={};
function compute(num){
if(result[num]){
console.log('Already Computed ',result[num]);
return ;
}
for(let i = 1; i<=10000; i++){
for(let j = 1; j<=100000; j++){

}
}
result[num] = num * num;
}
undefined
result;
{}
compute(3);
undefined
result
{3: 9}
compute(2);
undefined
var result={};
function compute(num){
if(result[num]){
console.log('Already Computed ',result[num]);
return ;
}
for(let i = 1; i<=10000; i++){
for(let j = 1; j<=200000; j++){

}
}
console.log('Computed ');
result[num] = num * num;
}
undefined
compute(4);
VM1060:12 Computed 
undefined
result;
{4: 16}
compute(4);
VM1060:4 Already Computed  16
undefined
compute(5);
VM1060:12 Computed 
undefined
compute(5);
VM1060:4 Already Computed  25
undefined
function dal(name){
return function(masala){
return function(salt){
    return name + masala + salt;
}
}
}
undefined
dal('Lal Dal')('MDH')('Tata')
"Lal DalMDHTata"
var masalaDAL = dal('Yellow Dal');
undefined
masalaDAL;
ƒ (masala){
return function(salt){
    return name + masala + salt;
}
}
typeof masalaDAL;
"function"
console.dir(masalaDAL);
VM1491:1 ƒ anonymous(masala)arguments: nullcaller: nulllength: 1name: ""prototype: {constructor: ƒ}__proto__: ƒ ()[[FunctionLocation]]: VM1270:2[[Scopes]]: Scopes[3]0: Closure (dal) {name: "Yellow Dal"}1: Script {e: 1000, ff: Array(3)}2: Global {window: Window, self: Window, document: document, name: "", location: Location, …}
undefined
var masalaSaltDal = masalaDAL('MDH');
undefined
typeof masalaSaltDal;
"function"
masalaSaltDal;
ƒ (salt){
    return name + masala + salt;
}
console.dir(masalaSaltDal);
VM1646:1 ƒ anonymous(salt)arguments: nullcaller: nulllength: 1name: ""prototype: {constructor: ƒ}__proto__: ƒ ()[[FunctionLocation]]: VM1270:3[[Scopes]]: Scopes[4]0: Closure {masala: "MDH"}masala: "MDH"1: Closure (dal)name: "Yellow Dal"2: Script {e: 1000, ff: Array(3)}3: Global {window: Window, self: Window, document: document, name: "", location: Location, …}
undefined
masalaSaltDal();
"Yellow DalMDHundefined"
masalaSaltDal('TATA');
"Yellow DalMDHTATA"
dal('Yellow Dal')('MDH')('Tata');
"Yellow DalMDHTata"
